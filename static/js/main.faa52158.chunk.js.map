{"version":3,"sources":["component/Song.js","component/List.js","component/Search.js","component/layout/Header.js","App.js","serviceWorker.js","index.js"],"names":["Song","props","react_default","a","createElement","className","style","star","includes","track","url","color","onClick","handleStar","src","image","alt","href","target","rel","name","artist","List","_this","this","title","toUpperCase","tracksJson","map","t","index","keyword","toLowerCase","component_Song","key","Component","Search","onSubmit","handleSubmit","Input_default","type","placeholder","value","onChange","Button_default","Header","id","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","_this2","fetch","then","response","json","data","setState","tracks","myUrl","prevState","indexOf","filter","_","i","concat","event","_event$target","defineProperty","layout_Header","component_Search","component_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kOA4CeA,MA1Cf,SAAcC,GAaZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,QACEC,UAAU,OACVC,MAfAL,EAAMM,KAAKC,SAASP,EAAMQ,MAAMC,KAC3B,CACLC,MAAO,UAGF,CACLA,MAAO,QAUPC,QAAS,WACPX,EAAMY,WAAWZ,EAAMQ,MAAMC,OAJjC,UAUAR,EAAAC,EAAAC,cAAA,OACEC,UAAU,YACVS,IAAKb,EAAMQ,MAAMM,MAAM,GAAG,SAC1BC,IAAI,UAENd,EAAAC,EAAAC,cAAA,KACEC,UAAU,OACVY,KAAMhB,EAAMQ,MAAMC,IAClBQ,OAAO,SACPC,IAAI,uBAEJjB,EAAAC,EAAAC,cAAA,YAAOH,EAAMQ,MAAMW,MACnBlB,EAAAC,EAAAC,cAAA,kBAAUH,EAAMQ,MAAMY,OAAOD,SCsBtBE,mLAvDJ,IAAAC,EAAAC,KAEP,MAAyB,SAArBA,KAAKvB,MAAMwB,MAEXvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASmB,KAAKvB,MAAMwB,MAAMC,eACxCF,KAAKvB,MAAM0B,WAAWC,IAAI,SAACC,EAAGC,GAC7B,OACEP,EAAKtB,MAAMM,KAAKC,SAASqB,EAAEnB,OACH,KAAvBa,EAAKtB,MAAM8B,SACVF,EAAET,KAAKY,cAAcxB,SAASe,EAAKtB,MAAM8B,UACzCF,EAAER,OAAOD,KAAKY,cAAcxB,SAASe,EAAKtB,MAAM8B,UAGhD7B,EAAAC,EAAAC,cAAC6B,EAAD,CACExB,MAAOoB,EACPK,IAAKJ,EACLvB,KAAMgB,EAAKtB,MAAMM,KACjBM,WAAYU,EAAKtB,MAAMY,aAItB,QAQXX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASmB,KAAKvB,MAAMwB,MAAMC,eACxCF,KAAKvB,MAAM0B,WAAWC,IAAI,SAACC,EAAGC,GAC7B,MACyB,KAAvBP,EAAKtB,MAAM8B,SACXF,EAAET,KAAKY,cAAcxB,SAASe,EAAKtB,MAAM8B,UACzCF,EAAER,OAAOD,KAAKY,cAAcxB,SAASe,EAAKtB,MAAM8B,SAG9C7B,EAAAC,EAAAC,cAAC6B,EAAD,CACExB,MAAOoB,EACPK,IAAKJ,EACLvB,KAAMgB,EAAKtB,MAAMM,KACjBM,WAAYU,EAAKtB,MAAMY,aAItB,eAhDAsB,+CCqBJC,mLAhBX,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcgC,SAAUb,KAAKvB,MAAMqC,cACjDpC,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,CACEqC,KAAK,OACLpB,KAAK,UACLqB,YAAY,SACZC,MAAOlB,KAAKvB,MAAM8B,QAAQC,cAC1BW,SAAUnB,KAAKvB,MAAMqC,eAEvBpC,EAAAC,EAAAC,cAACwC,EAAAzC,EAAD,oBAjBWgC,oBCQNU,MATf,WACE,OACE3C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,SACQH,EAAAC,EAAAC,cAAA,QAAM0C,GAAG,KAAT,QCqFCC,cApFb,SAAAA,IAAc,IAAAxB,EAAA,OAAAyB,OAAAC,EAAA,EAAAD,CAAAxB,KAAAuB,IACZxB,EAAAyB,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA5B,QACK6B,MAAQ,CAEX1B,WAAY,GAGZI,QAAS,GAETxB,KAAM,IAERgB,EAAKV,WAAaU,EAAKV,WAAWyC,KAAhBN,OAAAO,EAAA,EAAAP,CAAAzB,IAClBA,EAAKe,aAAef,EAAKe,aAAagB,KAAlBN,OAAAO,EAAA,EAAAP,CAAAzB,IAZRA,mFAeM,IAAAiC,EAAAhC,KAElBiC,MACE,6IAECC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJL,EAAKM,SAAS,CACZnC,WAAYkC,EAAKE,8CAKdC,GACTxC,KAAKsC,SAAS,SAAAG,GACZ,IAAInC,EAAQmC,EAAU1D,KAAK2D,QAAQF,GACnC,OAAIlC,GAAS,EAGJ,CACLvB,KAAM0D,EAAU1D,KAAK4D,OAAO,SAACC,EAAGC,GAAJ,OAAUA,IAAMvC,KAKvC,CACLvB,KAAM0D,EAAU1D,KAAK+D,OAAO,CAACN,4CAMxBO,GAAO,IAAAC,EACMD,EAAMrD,OAAtBE,EADUoD,EACVpD,KAAMsB,EADI8B,EACJ9B,MACdlB,KAAKsC,SAALd,OAAAyB,EAAA,EAAAzB,CAAA,GAAiB5B,EAAOsB,qCAIxB,OACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACsE,EAAD,CAAQrE,UAAU,KAClBH,EAAAC,EAAAC,cAACuE,EAAD,CAAQ5C,QAASP,KAAK6B,MAAMtB,QAASO,aAAcd,KAAKc,eACvDd,KAAK6B,OAAS7B,KAAK6B,MAAM1B,WAAWlB,OACnCP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACdH,EAAAC,EAAAC,cAACwE,EAAD,CACEnD,MAAM,MACNE,WAAYH,KAAK6B,MAAM1B,WAAWlB,MAClCF,KAAMiB,KAAK6B,MAAM9C,KACjBM,WAAYW,KAAKX,WACjBkB,QAASP,KAAK6B,MAAMtB,WAGxB7B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACdH,EAAAC,EAAAC,cAACwE,EAAD,CACEnD,MAAM,OACNE,WAAYH,KAAK6B,MAAM1B,WAAWlB,MAClCF,KAAMiB,KAAK6B,MAAM9C,KACjBM,WAAYW,KAAKX,WACjBkB,QAASP,KAAK6B,MAAMtB,oBA3ElBI,aCME0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjF,EAAAC,EAAAC,cAACgF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.faa52158.chunk.js","sourcesContent":["import React from \"react\"\nimport \"../App.css\"\nfunction Song(props) {\n  const myStar = () => {\n    if (props.star.includes(props.track.url)) {\n      return {\n        color: \"yellow\"\n      }\n    } else {\n      return {\n        color: \"grey\"\n      }\n    }\n  }\n\n  return (\n    <div className=\"Song\">\n      <span\n        className=\"star\"\n        style={myStar()}\n        onClick={() => {\n          props.handleStar(props.track.url)\n        }}\n      >\n        â˜…\n      </span>\n\n      <img\n        className=\"album-art\"\n        src={props.track.image[0][\"#text\"]}\n        alt=\"album\"\n      />\n      <a\n        className=\"link\"\n        href={props.track.url}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <span>{props.track.name}</span>\n        <span> - {props.track.artist.name}</span>\n      </a>\n    </div>\n  )\n}\nexport default Song\n","import React, { Component } from \"react\"\nimport Song from \"./Song\"\n\nimport \"../App.css\"\n\nclass List extends Component {\n  render() {\n    //if the list is for star\n    if (this.props.title === \"star\") {\n      return (\n        <div>\n          <div className=\"title\">{this.props.title.toUpperCase()}</div>\n          {this.props.tracksJson.map((t, index) => {\n            if (\n              this.props.star.includes(t.url) &&\n              (this.props.keyword === \"\" ||\n                t.name.toLowerCase().includes(this.props.keyword) ||\n                t.artist.name.toLowerCase().includes(this.props.keyword))\n            ) {\n              return (\n                <Song\n                  track={t}\n                  key={index}\n                  star={this.props.star}\n                  handleStar={this.props.handleStar}\n                />\n              )\n            }\n            return null\n          })}\n        </div>\n      )\n    }\n    //if list is for general purpose, which is all\n    else {\n      return (\n        <div>\n          <div className=\"title\">{this.props.title.toUpperCase()}</div>\n          {this.props.tracksJson.map((t, index) => {\n            if (\n              this.props.keyword === \"\" ||\n              t.name.toLowerCase().includes(this.props.keyword) ||\n              t.artist.name.toLowerCase().includes(this.props.keyword)\n            ) {\n              return (\n                <Song\n                  track={t}\n                  key={index}\n                  star={this.props.star}\n                  handleStar={this.props.handleStar}\n                />\n              )\n            }\n            return null\n          })}\n        </div>\n      )\n    }\n  }\n}\n\nexport default List\n","import React, { Component } from \"react\"\nimport Button from \"@material-ui/core/Button\"\nimport Input from \"@material-ui/core/Input\"\nclass Search extends Component {\n  //   handleSubmit(event) {\n  //     event.preventDefault()\n  //     console.log(\"search handleSubmit called\")\n  //     this.props.handleChange(event)\n  //   }\n  render() {\n    return (\n      <div className=\"Search\">\n        <form className=\"search-form\" onSubmit={this.props.handleSubmit}>\n          <Input\n            type=\"text\"\n            name=\"keyword\"\n            placeholder=\"search\"\n            value={this.props.keyword.toLowerCase()}\n            onChange={this.props.handleSubmit}\n          />\n          <Button>go</Button>\n        </form>\n      </div>\n    )\n  }\n}\nexport default Search\n","import React from \"react\"\nimport \"./Header.css\"\nfunction Header() {\n  return (\n    <header className=\"headerComponent\">\n      <h1 className=\"logo\">\n        Allegr<span id=\"o\">o</span>\n      </h1>\n    </header>\n  )\n}\nexport default Header\n","import React, { Component } from \"react\"\nimport List from \"./component/List\"\nimport Search from \"./component/Search\"\nimport Header from \"./component/layout/Header\"\nimport \"./App.css\"\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      //store json\n      tracksJson: {},\n\n      //keyword used for search\n      keyword: \"\",\n      //array of url of starred songs\n      star: []\n    }\n    this.handleStar = this.handleStar.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n  //bringing json\n  componentDidMount() {\n    //fetch music object here, put it into state\n    fetch(\n      \"https://gist.githubusercontent.com/paul-tcell/3803920c0570eb5ce83309bdd5d07ce4/raw/174eac7dc721cf83e2cee98710be947b8f526f87/100songs.json\"\n    )\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          tracksJson: data.tracks\n        })\n      })\n  }\n  //handles star and unstar process, adding removing from star array\n  handleStar(myUrl) {\n    this.setState(prevState => {\n      let index = prevState.star.indexOf(myUrl) //search for the song\n      if (index > -1) {\n        //song exists inside\n        //remove\n        return {\n          star: prevState.star.filter((_, i) => i !== index)\n        }\n      } else {\n        //song does not exist\n        //add\n        return {\n          star: prevState.star.concat([myUrl])\n        }\n      }\n    })\n  }\n  //abstracted handleChange just search for now\n  handleSubmit(event) {\n    const { name, value } = event.target\n    this.setState({ [name]: value })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header className=\"\" />\n        <Search keyword={this.state.keyword} handleSubmit={this.handleSubmit} />\n        {this.state && this.state.tracksJson.track && (\n          <div>\n            <span className=\"List\">\n              <List\n                title=\"all\"\n                tracksJson={this.state.tracksJson.track}\n                star={this.state.star}\n                handleStar={this.handleStar}\n                keyword={this.state.keyword}\n              />\n            </span>\n            <span className=\"List\">\n              <List\n                title=\"star\"\n                tracksJson={this.state.tracksJson.track}\n                star={this.state.star}\n                handleStar={this.handleStar}\n                keyword={this.state.keyword}\n              />\n            </span>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}